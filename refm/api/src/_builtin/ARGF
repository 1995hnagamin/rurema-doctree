= object ARGF < ARGF.class

スクリプトに指定した引数
([[m:Object::ARGV]] を参照) をファイル名とみなして、
それらのファイルを連結した 1 つの仮想ファイルを表すオブジェクトです。
ARGV が空なら標準入力を対象とします。
ARGV を変更すればこのオブジェクトの動作に影響します。

    while line = ARGF.gets
      ....
    end

は、

    while argv = ARGV.shift
      File.open(argv) {|file|
        while line = file.gets
          ....
        end
      }
    end

のように動作します。

ARGF を処理するごとに ARGV の要素は一つずつ取り除かれます。
最後まで ARGF を読み込んだ後、再度 ARGF から内容を読むと
(ARGV が空なので)標準入力からの読み込みとなります。

    ARGV.replace %w(/tmp/foo /tmp/bar)
    ARGF.each {|line|
        # 処理中の ARGV の内容を表示
        p [ARGF.filename, ARGV]
        ARGF.skip
    }
        # => ["/tmp/foo", ["/tmp/bar"]]
        #    ["/tmp/bar", []]
    # 最後まで読んだ後 (ARGV が空) の動作
    p ARGF.gets      # => nil
    p ARGF.filename  # => "-"

[[m:Kernel.#gets]] など一部の組み込み関数は
ARGF.gets などこのオブジェクトをレシーバとしたメソッドの省略形です。

また、ARGF は [[c:ARGF.class]] クラスのインスタンスです。
各メソッドの詳細は [[c:ARGF.class]] を参照してください。

===[a:inplace] インプレースエディットモード

インプレースエディット (in-place edit) モードは Ruby のコマンドライン引数に指定されたファイルの内容を置き換えます。

コマンドラインオプションで -i を指定すると Ruby はこのモードで動作します。
また [[m:ARGF.class#inplace_mode=]] を使用して起動後にモードに入ることも出来ます。

このモードで動作中は [[m:$stdout]] が処理対象への書き出しストリームで置き換えられます。
実行例は [[ref:d:spec/rubycmd#cmd_option]] や [[m:ARGF.class#inplace_mode=]] を参照してください。

= class ARGF.class

extend Enumerable

[[c:ARGF]] を表すクラスです。

== Public Instance Methods

--- filename -> String
--- path -> String

処理対象のファイル名を返します。
標準入力に対しては - を返します。
組み込み変数 [[m:$FILENAME]] と同じです。

  $ echo "foo" > foo
  $ echo "bar" > bar
  $ echo "glark" > glark

  $ ruby argf.rb foo bar glark

  ARGF.filename # => "foo"
  ARGF.read(5)  # => "foo\nb"
  ARGF.filename # => "bar"
  ARGF.skip
  ARGF.filename # => "glark"

--- to_s -> String
--- inspect -> String

常に文字列 "ARGF" を返します。

--- file -> IO
処理対象の [[c:File]] オブジェクト(または [[c:IO]] オブジェクト)を
返します。

  $ echo "foo" > foo
  $ echo "bar" > bar

  $ ruby argf.rb foo bar

  ARGF.file      # => #<File:foo>
  ARGF.read(5)   # => "foo\nb"
  ARGF.file      # => #<File:bar>

ARGFが現在開いている処理対象が標準入力の場合、$stdin を返します。

--- lineno -> Integer

全引数ファイルを一つのファイルとみなしたときの現在の行番号を返します。
個々の引数ファイル毎の行番号を得るには ARGF.file.lineno とします。

  ARGF.lineno   # => 0
  ARGF.readline # => "This is line 1\n"
  ARGF.lineno   # => 1

--- lineno=(number)
全引数ファイルを一つのファイルとみなしたときの現在の行番号を number に書き換えます。

@param number 更新後の行番号を指定する

  ARGF.lineno      # => 0
  ARGF.readline    # => "This is line 1\n"
  ARGF.lineno      # => 1
  ARGF.lineno = 0  # => 0
  ARGF.lineno      # => 0

--- skip -> self

処理対象のファイルをクローズします。
次回の読み込みは次の引数が処理対象になります。
self を返します。

  $ echo "foo" > foo
  $ echo "bar" > bar

  $ ruby argf.rb foo bar
  ARGF.filename  # => "foo"
  ARGF.skip
  ARGF.filename  # => "bar"

--- binmode -> self
[[m:IO#binmode]]を参照

--- close -> self
処理対象のファイルをクローズします。開くファイルが残っている場合は次のファイルをオープンします。

  $ echo "foo" > foo
  $ echo "bar" > bar

  $ ruby argf.rb foo bar

  ARGF.filename  # => "foo"
  ARGF.close
  ARGF.filename  # => "bar"
  ARGF.close

--- closed? -> bool
ARGFがcloseされていればtrueを返します。

@see [[m:IO#closed?]]

--- each(rs = $/) {|line| ... } -> self
--- each_line(rs = $/) {|line| ... } -> self
--- each(rs = $/)       -> Enumerator
--- each_line(rs = $/)  -> Enumerator

ARGFの現在位置から一行ずつ文字列として読み込みます。

@param rs 区切り文字を指定する

例: ARGFの各ファイル名(1度のみ)、行番号、内容を表示

  ARGF.each_line do |line|
    puts ARGF.filename if ARGF.lineno == 1
    puts "#{ARGF.lineno}: #{line}"
  end

@see [[m:IO#each]], [[m:IO#each_line]], 

--- each_byte{|char| ...} -> self
--- each_byte -> Enumerator

ARGF の現在位置から 1 バイトずつ読み込み、それを整数として与え、ブロックを実行します。

@see [[m:IO#each_byte]]

--- each_char{|c| ... }     -> self
--- each_char               -> Enumerator

レシーバに含まれる文字を一文字ずつブロックに渡して評価します。

レシーバは読み込み可能でなければなりません。

@see [[m:IO#each_char]], [[m:IO#chars]]

--- chars{ |c| ... }        -> self
--- chars                   -> Enumerator

このメソッドは obsolete です。
代わりに [[m:ARGF.class#each_char]] を使用してください。
使用すると警告メッセージが表示されます。

レシーバに含まれる文字を一文字ずつブロックに渡して評価します。

レシーバは読み込み可能でなければなりません。

@see [[m:ARGF.class#each_char]]

--- eof -> bool
--- eof? -> bool
現在開いているファイルがeofに達したらtrueを返します。そうでない場合はfalseを返します。

@raise IOError ファイルがopenされていない場合

  $ echo "eof" | ruby argf.rb

  ARGF.eof?                 # => false
  3.times { ARGF.readchar }
  ARGF.eof?                 # => false
  ARGF.readchar             # => "\n"
  ARGF.eof?                 # => true

@see [[m:IO#eof]], [[m:IO#eof?]]

--- fileno -> Integer
--- to_i -> Integer
現在オープンしているファイルのファイル記述子を表す整数を返します。

  ARGF.fileno    # => 3

@raise ArgumentError 現在開いているファイルがない場合に発生します。

--- getc -> String | nil

self から 1 文字読み込んで返します。EOF に到達した時には nil を返します。

  $ echo "foo" > file1
  $ echo "bar" > file2
  $ ruby argf.rb file1 file2

  ARGF.getc # => "f"
  ARGF.getc # => "o"
  ARGF.getc # => "o"
  ARGF.getc # => "\n"
  ARGF.getc # => "b"
  ARGF.getc # => "a"
  ARGF.getc # => "r"
  ARGF.getc # => "\n"
  ARGF.getc # => nil

@see [[m:ARGF.class#getbyte]], [[m:ARGF.class#gets]]

--- gets(rs = $/)    -> String | nil
--- gets(limit) -> String | nil
--- gets(rs, limit) -> String | nil

ARGFの現在位置から一行ずつ文字列として読み込みます。EOF に到達した時には nil を返します。

@param rs 行の区切りを文字列で指定します。rs に nil を指定すると行区切りなしとみなします。
          空文字列 "" を指定すると連続する改行を行の区切りとみなします(パラグラフモード)。
@param limit 最大の読み込みバイト数

@see [[m:Kernel.#gets]], [[m:IO#gets]]

--- pos -> Integer
--- tell -> Integer
ARGFが現在開いているファイルのファイルポインタの現在の位置を整数で返します。

  ARGF.pos    # => 0
  ARGF.gets   # => "This is line one\n"
  ARGF.pos    # => 17

@see [[m:IO#pos]], [[m:IO#tell]]

--- pos=(n)
ARGFが開いているファイルのファイルポインタを指定位置に移動します。

@param n 先頭からのオフセットを整数で指定します。

  ARGF.pos = 17
  ARGF.gets   # => "This is line two\n"

@see [[m:IO#pos=]]

--- read(length = nil, str = nil) -> String
ARGVに指定されたファイルを先頭のファイルからlengthバイト読み込み、
その文字列をstrに出力します。読み込んだ文字列を返します。

@param length 読み込むバイト数を指定します nilの場合はARGVのすべてのファイルを読み込みます。

@param str 出力先の文字列

  $ echo "small" > small.txt
  $ echo "large" > large.txt
  $ ./glark.rb small.txt large.txt

  ARGF.read      # => "small\nlarge"
  ARGF.read(200) # => "small\nlarge"
  ARGF.read(2)   # => "sm"
  ARGF.read(0)   # => ""

@see [[m:IO#read]]

--- readchar -> Integer
ARGFから 1 文字読み込んで、その文字に対応する Fixnum を返します。EOF に到達した時には EOFErrorを発生します。

@raise EOFError EOFに達した時発生する

  $ echo "foo" > file
  $ ruby argf.rb file

  ARGF.readchar  # => "f"
  ARGF.readchar  # => "o"
  ARGF.readchar  # => "o"
  ARGF.readchar  # => "\n"
  ARGF.readchar  # => end of file reached (EOFError)

@see [[m:ARGF.class#getc]]

--- readline -> String
ARGFの現在位置から一行ずつ文字列として読み込みます。EOF に到達した時にはEOFErrorを発生します。

@raise EOFError EOFに達したら発生する

@see [[m:Kernel.#readline]] [[m:ARGF.class#gets]]

--- readlines(rs = $/) -> [String]
--- to_a(rs = $/) -> [String]
ARGFの各行を配列に読み込んで返します。rsがnilの場合は要素に各ファイルをすべて読み込んだ配列を返します。

@param rs 行区切り文字

  lines = ARGF.readlines
  lines[0]                # => "This is line one\n"

@see [[m:$/]] [[m:IO#readlines]]

--- rewind -> 0
ARGFが現在開いているファイルのファイルポインタを先頭に戻します。

  ARGF.readline   # => "This is line one\n"
  ARGF.rewind     # => 0
  ARGF.lineno     # => 0
  ARGF.readline   # => "This is line one\n"

--- seek(offset, whence = IO::SEEK_SET) -> 0
ARGFが現在開いているファイルのファイルポインタを whence の位置から offset だけ移動させます。 offset 位置への移動が成功すれば 0 を返します。

@param offset ファイルポインタを移動させるオフセットを整数で指定します。
@param whence [[m:IO#seek]]を参照

@see [[m:IO#seek]]

--- to_io -> IO
ARGFが現在開いているファイルの[[c:File]]、または[[c:IO]]オブジェクトを返します

  ARGF.to_io    # => #<File:glark.txt>
  ARGF.to_io    # => #<IO:<STDIN>>

@see [[m:ARGF.class#file]], [[m:ARGF.class#to_write_io]]

--- bytes { |char| ... } -> self
--- bytes                -> Enumerator

このメソッドは obsolete です。
代わりに [[m:ARGF.class#each_byte]] を使用してください。
使用すると警告メッセージが表示されます。

self を 1 バイトずつ整数としてブロックの引数に繰り返しブロックを呼びだします。

ブロックを省略した場合には、
[[c:Enumerator]] オブジェクトを生成して返します。

   ARGF.bytes.to_a        #=> [104, 101, 108, 108, 111]

--- lines(rs = $/) { |line| ... }   -> self
--- lines(limit) { |line| ... }     -> self
--- lines(rs, limit) { |line| ... } -> self
--- lines(rs = $/)                  -> Enumerator
--- lines(limit)                    -> Enumerator
--- lines(rs, limit)                -> Enumerator

このメソッドは obsolete です。
代わりに [[m:ARGF.class#each_line]] を使用してください。
使用すると警告メッセージが表示されます。

現在位置から 1 行ずつ文字列として読み込み、それを引数として 与えられたブロックを実行します。

ブロックが与えられなかった場合は、
[[c:Enumerator]] オブジェクトを生成して返します。

テキスト読み込みメソッドとして動作します。

limit で最大読み込みバイト数を指定します。ただしマルチバイト文字が途中
で 切れないように余分に読み込む場合があります。

@param rs 行の区切りを文字列で指定します。rs に nil を指定すると行区切りなしとみなします。
          空文字列 "" を指定すると連続する改行を行の区切りとみなします(パラグラフモード)。

@param limit 最大の読み込みバイト数

   ARGF.lines.to_a   #=> ["foo\n", "bar\n"]

@see [[m:$/]], [[m:ARGF.class#each_line]]

--- getbyte   -> Integer | nil

自身から 1 バイトを読み込み整数として返します。
既に EOF に達していれば nil を返します。

  $ echo "foo" > file1
  $ echo "bar" > file2
  $ ruby argf.rb file1 file2

  ARGF.getbyte # => 102
  ARGF.getbyte # => 111
  ARGF.getbyte # => 111
  ARGF.getbyte # => 10
  ARGF.getbyte # => 98
  ARGF.getbyte # => 97
  ARGF.getbyte # => 114
  ARGF.getbyte # => 10
  ARGF.getbyte # => nil

--- readbyte   -> Integer

自身から 1 バイトを読み込み整数として返します。
既に EOF に達していれば EOFError が発生します。

@raise EOFError 既に EOF に達している場合に発生します。

--- readpartial(maxlen, outbuf = nil) -> String

[[m:IO#readpartial]]を参照

[[m:ARGF.class#read]] などとは違って複数ファイルを同時に読み込むことはありません。

@param maxlen 読み込む長さの上限を整数で指定します。
@param outbuf 読み込んだデータを格納する [[c:String]] オブジェクトを指定します。

@see [[m:IO#readpartial]], [[m:ARGF.class#read_nonblock]]

--- each_codepoint{ |c| ... }    -> self
--- each_codepoint               -> Enumerator

self の各コードポイントに対して繰り返しブロックを呼びだします。

ブロックの引数にはコードポイントを表す整数が渡されます。

ブロックを省略した場合には、[[c:Enumerator]] を返します。

#@# 2.0 から追加のメソッドだが IO#codepoints と揃えたと思われる。
--- codepoints { |c| ... }       -> self
--- codepoints                   -> Enumerator

このメソッドは obsolete です。
代わりに [[m:ARGF.class#each_codepoint]] を使用してください。
使用すると警告メッセージが表示されます。

self の各コードポイントに対して繰り返しブロックを呼びだします。

ブロックの引数にはコードポイントを表す整数が渡されます。

ブロックを省略した場合には、[[c:Enumerator]] を返します。

@see [[m:ARGF.class#each_codepoint]]

--- argv -> Array

[[m:Kernel::ARGV]] を返します。

ARGF が ARGV をどう扱うかについては [[c:ARGF]] を参照してください。

#@#/*
#@# *  call-seq:
#@# *     ARGF.argv  -> ARGV
#@# *
#@# *  Returns the +ARGV+ array, which contains the arguments passed to your
#@# *  script, one per element.
#@# *
#@# *  For example:
#@# *
#@# *      $ ruby argf.rb -v glark.txt
#@# *
#@# *      ARGF.argv   #=> ["-v", "glark.txt"]
#@# *
#@# */


--- binmode? -> bool

ARGF の入力ストリームがバイナリモードなら true を返します。
そうでない場合、false を返します。

バイナリモードにするためには [[m:ARGF.class#binmode]] を使用します。

  ARGF.binmode?  #=> false
  ARGF.binmode
  ARGF.binmode?  #=> true

@see [[m:IO#binmode?]]

#@#/*
#@# *  call-seq:
#@# *     ARGF.binmode? 
#@# *
#@# *  Returns true if +ARGF+ is being read in binary mode; false otherwise. (To
#@# *  enable binary mode use +ARGF.binmode+.
#@# *
#@# * For example:
#@# *
#@# *     ARGF.binmode?  #=> false
#@# *     ARGF.binmode
#@# *     ARGF.binmode?  #=> true
#@# */


--- external_encoding -> Encoding

ARGF が処理するファイルに対する外部エンコーディングを返します。
デフォルトは [[m:Encoding.default_external]] です。

[[m:ARGF.class#set_encoding]] で設定します。

@see [[c:IO]], [[m:ARGF.class#internal_encoding]]

  ARGF.external_encoding  #=>  #<Encoding:UTF-8>

#@#/*
#@# *  call-seq:
#@# *     ARGF.external_encoding   -> encoding
#@# *
#@# *  Returns the external encoding for files read from +ARGF+ as an +Encoding+
#@# *  object. The external encoding is the encoding of the text as stored in a
#@# *  file. Contrast with +ARGF.internal_encoding+, which is the encoding used
#@# *  to represent this text within Ruby.
#@# *
#@# *  To set the external encoding use +ARGF.set_encoding+.
#@# *
#@# * For example:
#@# *
#@# *     ARGF.external_encoding  #=>  #<Encoding:UTF-8>
#@# *
#@# */


--- inplace_mode -> String | nil

[[ref:c:ARGF#inplace]]で書き換えるファイルのバックアップに付加される拡張子を返します。
拡張子が設定されていない場合は空文字列を返します。
インプレースモードでない場合は nil を返します。

Ruby 起動時の -i オプション や [[m:ARGF.class#inplace_mode=]] で設定します。

@see [[ref:d:spec/rubycmd#cmd_option]]

#@#/*
#@# *  call-seq:
#@# *     ARGF.inplace_mode  -> String
#@# *
#@# *  Returns the file extension appended to the names of modified files under
#@# *  inplace-edit mode. This value can be set using +ARGF.inplace_mode=+ or
#@# *  passing the +-i+ switch to the Ruby binary.
#@# */


--- inplace_mode=(ext)

[[ref:c:ARGF#inplace]]時にバックアップファイルに付加する拡張子を設定します。
ピリオドも含めて指定する必要があります。

バックアップを残さない場合は空文字列を指定します。
この機能は Windows では使用出来ません。

設定が有効になるのは次のファイルの処理に移った時です。
インプレースモードに入っていない場合はその時点でモードに入ります。

Ruby 起動時の -i オプションで設定することも出来ます。

@param ext インプレースモード時にバックアップファイルに付加する拡張子を
           文字列で指定します。
           ピリオドも含める必要があります。

@see [[ref:d:spec/rubycmd#cmd_option]]

  $ ruby argf.rb file.txt
  
  ---- argf.rb ----
  # 引数のファイル中の各行の最初の "foo" を "bar" で置き換える
  ARGF.inplace_mode = '.bak'
  ARGF.lines do |line|
    print line.sub("foo","bar")
  end
  
  
  ---- -i オプションを使う場合 ----
  $ ruby -i.bak -p -e '$_.sub!("foo","bar")' file.txt
  
  ---- -i オプションを使う場合その２ ----
  $ ruby -i.bak -n -e 'print $_.sub("foo","bar")' file.txt


#@#/*
#@# *  call-seq:
#@# *     ARGF.inplace_mode = ext  -> ARGF
#@# *
#@# *  Sets the filename extension for inplace editing mode to the given String.
#@# *  Each file being edited has this value appended to its filename. The
#@# *  modified file is saved under this new name.
#@# *
#@# *  For example:
#@# *
#@# *      $ ruby argf.rb file.txt
#@# *
#@# *      ARGF.inplace_mode = '.bak'
#@# *      ARGF.lines do |line|
#@# *        print line.sub("foo","bar")
#@# *      end
#@# *
#@# * Each line of _file.txt_ has the first occurrence of "foo" replaced with
#@# * "bar", then the new line is written out to _file.txt.bak_.
#@# */


--- internal_encoding -> Encoding | nil

ARGF から読み込んだ文字列の内部エンコーディングを返します。
内部エンコーディングが指定されていない場合は nil を返します。

まだ読み込み処理を始めていない場合は [[m:Encoding.default_external]] を返します。

[[m:ARGF.class#set_encoding]] で設定します。

@see [[c:IO]], [[m:ARGF.class#external_encoding]]


#@#/*
#@# *  call-seq:
#@# *     ARGF.internal_encoding   -> encoding
#@# *
#@# *  Returns the internal encoding for strings read from +ARGF+ as an
#@# *  +Encoding+ object.
#@# *
#@# *  If +ARGF.set_encoding+ has been called with two encoding names, the second
#@# *  is returned. Otherwise, if +Encoding.default_external+ has been set, that
#@# *  value is returned. Failing that, if a default external encoding was
#@# *  specified on the command-line, that value is used. If the encoding is
#@# *  unknown, nil is returned.
#@# */


--- set_encoding(ext_enc)                        -> self
--- set_encoding(enc_str, options = {})          -> self
--- set_encoding(ext_enc, int_enc, options = {}) -> self

ARGF の外部／内部エンコーディングを設定します。
次以降に処理するファイルにも同じ設定が適用されます。

外部エンコーディングは ARGF を介して読み込むファイルの、
内部エンコーディングは読み込んだ文字列のエンコーディングです。

詳しくは [[m:IO#set_encoding]] を参照してください。

@param enc_str 外部／内部エンコーディングを"A:B" のようにコロンで
               区切って指定します。
@param ext_enc 外部エンコーディングを表す文字列か
               [[c:Encoding]] オブジェクトを指定します。
@param int_enc 内部エンコーディングを表す文字列か
               [[c:Encoding]] オブジェクトを指定します。
@param options エンコーディング変換のオプション。
               [[m:String#encode]] と同じものが指定できます。

@see [[m:String#encode]]

#@#/*
#@# *  call-seq:
#@# *     ARGF.set_encoding(ext_enc)                -> ARGF
#@# *     ARGF.set_encoding("ext_enc:int_enc")      -> ARGF
#@# *     ARGF.set_encoding(ext_enc, int_enc)       -> ARGF
#@# *     ARGF.set_encoding("ext_enc:int_enc", opt) -> ARGF
#@# *     ARGF.set_encoding(ext_enc, int_enc, opt)  -> ARGF
#@# *
#@# *  If single argument is specified, strings read from ARGF are tagged with
#@# *  the encoding specified.
#@# *
#@# *  If two encoding names separated by a colon are given, e.g. "ascii:utf-8",
#@# *  the read string is converted from the first encoding (external encoding)
#@# *  to the second encoding (internal encoding), then tagged with the second
#@# *  encoding.
#@# *
#@# *  If two arguments are specified, they must be encoding objects or encoding
#@# *  names. Again, the first specifies the external encoding; the second
#@# *  specifies the internal encoding.
#@# *
#@# *  If the external encoding and the internal encoding are specified, the
#@# *  optional +Hash+ argument can be used to adjust the conversion process. The
#@# *  structure of this hash is explained in the +String#encode+ documentation.
#@# *
#@# *  For example:
#@# *
#@# *      ARGF.set_encoding('ascii')         # Tag the input as US-ASCII text
#@# *      ARGF.set_encoding(Encoding::UTF_8) # Tag the input as UTF-8 text
#@# *      ARGF.set_encoding('utf-8','ascii') # Transcode the input from US-ASCII
#@# *                                         # to UTF-8.
#@# */

--- print(*arg)  -> nil

引数を順に処理対象のファイルに出力します。

[[ref:c:ARGF#inplace]]時にのみ使用できます。
また [[m:$stdout]] への代入の影響を受けません。
それ以外は [[m:Kernel.#print]] と同じです。

@param arg 出力するオブジェクトを任意個指定します。

--- printf(format, *arg)  -> nil

C 言語の printf と同じように、format に従い引数を
文字列に変換して処理対象のファイルに出力します。

[[ref:c:ARGF#inplace]]時にのみ使用できます。
また [[m:$stdout]] への代入の影響を受けません。
それ以外は出力先を指定しない形式の [[m:Kernel.#printf]] と同じです。

@param format フォーマット文字列です。
@param arg フォーマットされる引数です。


--- putc(ch)  -> object

文字 ch を処理対象のファイルに出力します。
ch を返します。

[[ref:c:ARGF#inplace]]時にのみ使用できます。
また [[m:$stdout]] への代入の影響を受けません。
それ以外は [[m:Kernel.#putc]] と同じです。

@param ch 出力する文字を [[c:String]] オブジェクトで指定します。

--- puts(*arg)  -> nil

引数と改行を順番に処理対象のファイルに出力します。
引数がなければ改行のみを出力します。

[[ref:c:ARGF#inplace]]時にのみ使用できます。
また [[m:$stdout]] への代入の影響を受けません。
それ以外は [[m:Kernel.#puts]] と同じです。

@param arg 出力するオブジェクトを任意個指定します。

--- read_nonblock(maxlen)              -> String
--- read_nonblock(maxlen, outbuf)      -> String
#@# TODO: Windows では使えない？

処理中のファイルからノンブロッキングモードで最大 maxlen バイト読み込みます。
第二の形式では読み込んだデータを outbuf に破壊的に格納してそれを返します。
詳しくは [[m:IO#read_nonblock]] を参照してください。

[[m:ARGF.class#read]] などとは違って複数ファイルを同時に読み込むことはありません。

@param maxlen 読み込む長さの上限を整数で指定します。
@param outbuf 読み込んだデータを格納する [[c:String]] オブジェクトを指定します。

@see [[m:ARGF.class#readpartial]]

#@#/*
#@# *  call-seq:
#@# *     ARGF.read_nonblock(maxlen)              -> string
#@# *     ARGF.read_nonblock(maxlen, outbuf)      -> outbuf
#@# *
#@# *  Reads at most _maxlen_ bytes from the ARGF stream in non-blocking mode.
#@# */


--- to_write_io  -> IO

処理対象のファイルへの書き出し用 [[c:IO]] オブジェクトを返します。

[[ref:c:ARGF#inplace]]時以外は読み込み用の IO オブジェクトを返します。
このため [[m:ARGF.class#write]] などの書き出し用メソッドを呼ぶと [[c:IOError]] が発生します。

#@#/*
#@# *  call-seq:
#@# *     ARGF.to_write_io  -> io
#@# *
#@# *  Returns IO instance tied to _ARGF_ for writing if inplace mode is
#@# *  enabled.
#@# */


--- write(str)  -> Integer

処理対象のファイルに対して str を出力します。
str が文字列でなければ to_s による文字列化を試みます。
実際に出力できたバイト数を返します。

[[ref:c:ARGF#inplace]]時にのみ使用できます。

@param str 出力する文字列を指定します。

@see [[m:ARGF.class#to_write_io]]

#@#/*
#@# *  call-seq:
#@# *     ARGF.write(string)   -> integer
#@# *
#@# *  Writes _string_ if inplace mode.
#@# */
