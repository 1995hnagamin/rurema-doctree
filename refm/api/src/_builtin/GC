= module GC

GC は Ruby インタプリタの「ゴミ集め(Garbage Collection)」を制御
するモジュールです。

@see [[c:ObjectSpace]]

== Singleton Methods

--- disable -> bool

ガーベージコレクトを禁止します。

前回の禁止状態を返します(禁止されていたなら true, GC が有効であったなら、
false)。

@see [[m:GC.enable]]

--- enable -> bool

ガーベージコレクトを許可します。

前回の禁止状態を返します(禁止されていたなら true, GC が有効であったなら、
false)。

@see [[m:GC.disable]]

#@since 2.1.0
--- start(full_mark: true, immediate_sweep: true) -> nil
#@else
--- start -> nil
#@end

ガーベージコレクトを開始します。

[[m:GC#garbage_collect]] や [[m:ObjectSpace.#garbage_collect]] と同じ働きをします。
[[m:GC.disable]] により GC が禁止されている場合は何もしません。

nil を返します。

#@since 2.1.0
@param full_mark マイナー GC を動作させる場合は false を、そうでない場
                 合は true を指定します。

@param immediate_sweep sweep を遅らせる(Lazy Sweep を行う)場合は false
                       を、そうでない場合は true を指定します。

注意: これらのキーワード引数は Ruby の実装やバージョンによって異なりま
す。将来のバージョンとの互換性も保証されません。また、Ruby の実装がサポー
トしていない場合はキーワード引数を指定しても無視される可能性があります。
#@end

#@since 1.8.7
--- stress -> bool
--- stress=(value)

GC.stress が真に設定されている間は、GC を行えるすべての機会に GC を行います。

@param value 任意のオブジェクト。真偽値として解釈されます。
#@end

#@since 1.9.1
--- count -> Integer

プロセス開始からガーベージコレクトを実行した回数を [[c:Integer]] で返し
ます。
#@end

#@since 1.9.3
--- stat(result_hash = {}) -> {Symbol => Integer}
#@since 2.1.0
--- stat(key) -> Numeric
#@end

GC 内部の統計情報を [[c:Hash]] で返します。

@param result_hash 戻り値のためのハッシュを指定します。省略した場合は新
                   しくハッシュを作成します。result_hash の内容は上書き
                   されます。

#@since 2.1.0

@param key 得られる統計情報から特定の情報を取得したい場合にキーを
           [[c:Symbol]] で指定します。
#@end

@return GC 内部の統計情報を[[c:Hash]] で返します。
#@since 2.1.0
        引数 key を指定した場合は数値を返します。
#@end

  GC.stat
  # =>
#@since 2.2.0
   {
     :count=>0,
     :heap_allocated_pages=>24,
     :heap_sorted_length=>24,
     :heap_allocatable_pages=>0,
     :heap_available_slots=>9783,
     :heap_live_slots=>7713,
     :heap_free_slots=>2070,
     :heap_final_slots=>0,
     :heap_marked_slots=>0,
     :heap_swept_slots=>0,
     :heap_eden_pages=>24,
     :heap_tomb_pages=>0,
     :total_allocated_pages=>24,
     :total_freed_pages=>0,
     :total_allocated_objects=>7796,
     :total_freed_objects=>83,
     :malloc_increase_bytes=>2389312,
     :malloc_increase_bytes_limit=>16777216,
     :minor_gc_count=>0,
     :major_gc_count=>0,
     :remembered_wb_unprotected_objects=>0,
     :remembered_wb_unprotected_objects_limit=>0,
     :old_objects=>0,
     :old_objects_limit=>0,
     :oldmalloc_increase_bytes=>2389760,
     :oldmalloc_increase_bytes_limit=>16777216
   }
#@else
#@since 2.1.0
  {
    :count=>2,
    :heap_used=>9,
    :heap_length=>11,
    :heap_increment=>2,
    :heap_live_slot=>6836,
    :heap_free_slot=>519,
    :heap_final_slot=>0,
    :heap_swept_slot=>818,
    :total_allocated_object=>7674,
    :total_freed_object=>838,
    :malloc_increase=>181034,
    :malloc_limit=>16777216,
    :minor_gc_count=>2,
    :major_gc_count=>0,
    :remembered_shady_object=>55,
    :remembered_shady_object_limit=>0,
    :old_object=>2422,
    :old_object_limit=>0,
    :oldmalloc_increase=>277386,
    :oldmalloc_limit=>16777216
  }
#@else
  {
    :count          => 18,
    :heap_used      => 77,
    :heap_length    => 77,
    :heap_increment => 0,
    :heap_live_num  => 23287,
    :heap_free_num  => 8115,
    :heap_final_num => 0,
  }
#@end
#@end

戻り値のハッシュは処理系に依存します。これは将来変更になるかもしれません。

本メソッドは C Ruby 以外では動作しません。
#@end

#@since 2.1.0
--- latest_gc_info(result_hash = {}) -> Hash
--- latest_gc_info(key)              -> object

最新のGCの情報を返します。

@param result_hash 戻り値のためのハッシュを指定します。省略した場合は新
                   しくハッシュを作成します。result_hash の内容は上書き
                   されます。

@param key 得られる情報から特定の情報を取得したい場合にキーを
           [[c:Symbol]] で指定します。
#@end

== Instance Methods

--- garbage_collect -> nil

ガーベージコレクトを開始します。

[[m:GC.start]] や [[m:ObjectSpace.#garbage_collect]] と同じ働きをします。
[[m:GC.disable]] により GC が禁止されている場合は何もしません。

nil を返します。

#@since 2.1.0
== Constants

--- OPTS -> [String]

コンパイル時に指定したGCのオプションです。

可能性があるオプション文字列は以下の通りです。

  * "GC_DEBUG"
  * "USE_RGENGC"
  * "RGENGC_DEBUG"
  * "RGENGC_CHECK_MODE"
  * "RGENGC_PROFILE"
  * "RGENGC_ESTIMATE_OLDMALLOC"
  * "GC_PROFILE_MORE_DETAIL"
  * "GC_ENABLE_LAZY_SWEEP"
  * "CALC_EXACT_MALLOC_SIZE"
  * "MALLOC_ALLOCATED_SIZE"
  * "MALLOC_ALLOCATED_SIZE_CHECK"
  * "GC_PROFILE_DETAIL_MEMORY"

--- INTERNAL_CONSTANTS -> {Symbol => Integer}

GC用内部定数の値を保持するハッシュテーブルです。

  GC::INTERNAL_CONSTANTS
  # => {:RVALUE_SIZE=>40, :HEAP_PAGE_OBJ_LIMIT=>408, :HEAP_PAGE_BITMAP_SIZE=>56, :HEAP_PAGE_BITMAP_PLANES=>4}

#@end
