= class Integer < Numeric

#@since 2.4.0
alias Fixnum
alias Bignum

整数クラスです。

整数オブジェクトに特異メソッドを追加する事はできません。追加した場合、
[[c:TypeError]] が発生します。
#@else
整数の抽象クラスです。サブクラスとして [[c:Fixnum]] と [[c:Bignum]] が
あります。この 2 種類の整数は値の大きさに応じてお互いに自動的に変換さ
れます。ビット操作において整数は無限の長さのビットストリングとみなすこ
とができます。
#@end

2.4.0 から [[c:Fixnum]], [[c:Bignum]] は Integerに統合されました。
2.4.0 からはどちらも Integer クラスのエイリアスとなっています。

== Instance Methods

#@until 1.9.1
--- chr -> String

文字コードに対応する 1 バイトの文字列を返します。

例えば65.chr は "A" を返します。

逆に文字列から文字コードを得るには "A"[0] とします

@return     1バイト文字列
@raise RangeError self が 0 から 255 の範囲外の場合に発生します。
@see [[m:String#[] ]]
#@else
--- chr -> String
--- chr(encoding) -> String

与えられたエンコーディング encoding において self を文字コードと見た時、それに対応する一文字からなる文字列を返します。
引数無しで呼ばれた場合は self を US-ASCII、ASCII-8BIT、デフォルト内部エンコーディングの順で優先的に解釈します。

  p 65.chr # => "A"
  p 0x79.chr.encoding # => #<Encoding:US_ASCII>
  p 0x80.chr.encoding # => #<Encoding:ASCII_8BIT>
  p 12354.chr Encoding::UTF_8 # => "あ"
  p 12354.chr Encoding::EUC_JP
  # => RangeError: invalid codepoint 0x3042 in EUC-JP
  p 12354.chr Encoding::ASCII_8BIT
  # => RangeError: 12354 out of char range
  p (2**32).chr
  # => RangeError: bignum out of char range

@param encoding エンコーディングを表すオブジェクト。Encoding::UTF_8、'shift_jis' など。
@return     一文字からなる文字列
@raise RangeError self を与えられたエンコーディングで正しく解釈できない場合に発生します。
@see [[m:String#ord]]
#@end

#@since 2.4.0
--- digits -> [Integer]
--- digits(base) -> [Integer]

base を基数として self を位取り記数法で表記した数値を配列で返します。
base を指定しない場合の基数は 10 です。

  16.digits # => [6, 1]
  16.digits(16) # => [0, 1]

self は非負整数でなければいけません。非負整数でない場合は、Math::DomainErrorが発生します。

  -10.digits # Math::DomainError: out of domain が発生

@return     位取り記数法で表した時の数値の配列
@param base 基数となる数値。
@raise ArgumentError base に正の整数以外を指定した場合に発生します。
@raise Math::DomainError 非負整数以外に対して呼び出した場合に発生します。
#@end

--- downto(min) {|n| ... } -> self
#@since 1.8.7
#@since 1.9.1
--- downto(min) -> Enumerator
#@else
--- downto(min) -> Enumerable::Enumerator
#@end
#@end

self から min まで 1 ずつ減らしながらブロックを繰り返し実行します。
self < min であれば何もしません。

@param min   数値
@return      self を返します。

@see [[m:Integer#upto]], [[m:Numeric#step]], [[m:Integer#times]]

--- next -> Fixnum | Bignum
--- succ -> Fixnum | Bignum

self の次の整数を返します。

例:

  1.next      #=> 2
  (-1).next   #=> 0
  1.succ      #=> 2
  (-1).succ   #=> 0

@see [[m:Integer#pred]]

--- times {|n| ... } -> self
#@since 1.8.7
#@since 1.9.1
--- times -> Enumerator
#@else
--- times -> Enumerable::Enumerator
#@end
#@end

self 回だけ繰り返します。
self が正の整数でない場合は何もしません。

またブロックパラメータには 0 から self - 1 までの数値が渡されます。

  3.times { puts "Hello, World!" }  # Hello, World! と3行続いて表示される。
  0.times { puts "Hello, World!" }  # 何も表示されない。
  5.times {|n| print n }            # 01234 と表示される。

@see [[m:Integer#upto]], [[m:Integer#downto]], [[m:Numeric#step]]

--- to_i   -> self
--- to_int -> self
--- floor  -> self
--- ceil   -> self
--- round  -> self
--- truncate -> self

self を返します。

--- to_s -> String
#@since 1.8.0
--- to_s(base) -> String
#@end
#@since 2.4.0
--- inspect       -> String
--- inspect(base) -> String
#@end

整数を 10 進文字列表現に変換します。

#@since 1.8.0
引数を指定すれば、それを基数とした文字列表
現に変換します。

    p 10.to_s(2)    # => "1010"
    p 10.to_s(8)    # => "12"
    p 10.to_s(16)   # => "a"
    p 35.to_s(36)   # => "z"
#@end

@return     数値の文字列表現
#@since 1.8.0
@param base 基数となる 2 - 36 の数値。
@raise ArgumentError base に 2 - 36 以外の数値を指定した場合に発生します。
#@end

--- upto(max) {|n| ... } -> Fixnum | Bignum
#@since 1.8.7
#@since 1.9.1
--- upto(max) -> Enumerator
#@else
--- upto(max) -> Enumerable::Enumerator
#@end
#@end

self から max まで 1 ずつ増やしながら繰り返します。
self > max であれば何もしません。

@param max   数値
@return      self を返します。

例:

  5.upto(10) {|i| print i, " " } # => 5 6 7 8 9 10

@see [[m:Integer#downto]], [[m:Numeric#step]], [[m:Integer#times]]

--- integer? -> true

常に真を返します。

#@since 1.8.7
--- even? -> bool

自身が偶数であれば真を返します。
そうでない場合は偽を返します。


--- odd? -> bool

自身が奇数であれば真を返します。
そうでない場合は偽を返します。


--- ord    -> Integer
自身を返します。

   10.ord    #=> 10
#@since 1.9.1
   # String#ord
#@end
   ?a.ord    #=> 97

#@since 1.9.1
@see [[m:String#ord]]
#@end

--- pred    -> Integer

self から -1 した値を返します。

   1.pred      #=> 0
   (-1).pred   #=> -2

@see [[m:Integer#next]]
#@end

#@since 1.9.1
--- denominator -> Integer

分母(常に1)を返します。

@return 分母を返します。

@see [[m:Integer#numerator]]

--- gcd(n) -> Integer

自身と整数 n の最大公約数を返します。

@raise ArgumentError n に整数以外のものを指定すると発生します。

例:

  2.gcd(2)                    # => 2
  3.gcd(7)                    # => 1
  3.gcd(-7)                   # => 1
  ((1<<31)-1).gcd((1<<61)-1)  # => 1

また、self や n が 0 だった場合は、0 ではない方の整数の絶対値を返します。

  3.gcd(0)                    # => 3
  0.gcd(-7)                   # => 7

@see [[m:Integer#lcm]], [[m:Integer#gcdlcm]]

--- gcdlcm(n) -> [Integer]

自身と整数 n の最大公約数と最小公倍数の配列 [self.gcd(n), self.lcm(n)]
を返します。

@raise ArgumentError n に整数以外のものを指定すると発生します。

例:

  2.gcdlcm(2)                    # => [2, 2]
  3.gcdlcm(-7)                   # => [1, 21]
  ((1<<31)-1).gcdlcm((1<<61)-1)  # => [1, 4951760154835678088235319297]

@see [[m:Integer#gcd]], [[m:Integer#lcm]]

--- lcm(n) -> Integer

自身と整数 n の最小公倍数を返します。

@raise ArgumentError n に整数以外のものを指定すると発生します。

例:

  2.lcm(2)                    # => 2
  3.lcm(-7)                   # => 21
  ((1<<31)-1).lcm((1<<61)-1)  # => 4951760154835678088235319297

また、self や n が 0 だった場合は、0 を返します。

  3.lcm(0)                    # => 0
  0.lcm(-7)                   # => 0

@see [[m:Integer#gcd]], [[m:Integer#gcdlcm]]

--- numerator -> Integer

分子(常に自身)を返します。

@return 分子を返します。

@see [[m:Integer#denominator]]

--- to_r -> Rational

自身を [[c:Rational]] に変換します。

例:

  1.to_r        # => (1/1)
  (1<<64).to_r  # => (18446744073709551616/1)

#@end

#@since 1.9.2
--- rationalize      -> Rational
--- rationalize(eps) -> Rational

自身を [[c:Rational]] に変換します。

@param eps 許容する誤差

引数 eps は常に無視されます。

例:

  2.rationalize      # => (2/1)
  2.rationalize(100) # => (2/1)
  2.rationalize(0.1) # => (2/1)

#@end
