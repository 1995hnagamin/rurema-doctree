#@since 2.1.0
= class Thread::Queue < Object
alias Queue
#@else
= class Queue < Object
#@end

Queue はスレッド間の FIFO(first in first out) の通信路です。ス
レッドが空のキューを読み出そうとすると停止します。キューになんら
かの情報が書き込まれると実行は再開されます。

#@since 2.1.0
最大サイズが指定できる Queue のサブクラス [[c:Thread::SizedQueue]] も提供されています。
#@else
最大サイズが指定できる Queue のサブクラス [[c:SizedQueue]] も提供されています。
#@end

=== 例

  require 'thread'

  q = Queue.new

  th1 = Thread.start do
    while resource = q.pop
      puts resource
    end
  end

  [:resource1, :resource2, :resource3, nil].each{|r|
    q.push(r)
  }

  th1.join

実行すると以下のように出力します。

  $ ruby que.rb
  resource1
  resource2
  resource3

== Class Methods

#@since 2.1.0
--- new -> Thread::Queue
#@else
--- new -> Queue
#@end

新しいキューオブジェクトを生成します。

== Instance methods

--- clear -> ()

キューを空にします。返り値は不定です。

--- empty? -> bool

キューが空の時、真を返します。

#@samplecode 例
#@until 2.3.0
require 'thread'
#@end
q = Queue.new
q.empty? # => true
q.push(:resource)
q.empty? # => false
#@end

--- length -> Integer
--- size -> Integer

キューの長さを返します。

--- num_waiting -> Integer

キューを待っているスレッドの数を返します。

--- pop(non_block = false) -> object
--- shift(non_block = false) -> object
--- deq(non_block = false) -> object

キューからひとつ値を取り出します。キューが空の時、呼出元のスレッドは停止します。

@param non_block true を与えると、キューが空の時に例外 [[c:ThreadError]] が発生します。

--- push(value) -> ()
--- <<(value)   -> ()
--- enq(value)  -> ()

キューの値を追加します。待っているスレッドがいれば実行を再開
させます。返り値は不定です。

#@since 2.3.0
--- close -> self

キューを close します。close 済みのキューを再度 open することはできません。

close 後は以下のように動作します。

 * [[m:Thread::Queue#closed?]] は true を返します
 * [[m:Thread::Queue#close]] は無視されます
 * [[m:Thread::Queue#enq]]/push/<< は [[c:ClosedQueueError]] を発生します
 * [[m:Thread::Queue#empty?]] が false を返す場合は [[m:Thread::Queue#deq]]/pop/shift は通常通りオブジェクトを返します

また、[[c:ClosedQueueError]] は [[c:StopIteration]] を継承しているため、
close する事でループから脱出する事もできます。

例:

  q = Queue.new
  Thread.new{
    while e = q.deq # wait for nil to break loop
      # ...
    end
  }
  q.close

--- closed? -> bool

キューが close されている時に true を返します。
#@end
